
module compl ( angle, start, clk, reset, r, i );
  input [11:0] angle;
  output [15:0] r;
  output [15:0] i;
  input start, clk, reset;
  wire   cos_en, start_r, N6, N14, n1, n2, n4, n5, n6, n7, n8, n9, n10;
  wire   [11:0] angle_r;
  wire   [15:0] cos_val;
  wire   [15:0] r_c;
  wire   [15:0] i_c;

  cos cos_mem ( .angle(angle_r), .cos_en(cos_en), .result(cos_val) );
  DFFR_X1 \angle_r_reg[11]  ( .D(angle[11]), .CK(clk), .RN(n10), .Q(
        angle_r[11]) );
  DFFR_X1 \angle_r_reg[10]  ( .D(angle[10]), .CK(clk), .RN(n10), .Q(
        angle_r[10]) );
  DFFR_X1 \angle_r_reg[9]  ( .D(angle[9]), .CK(clk), .RN(n10), .Q(angle_r[9])
         );
  DFFR_X1 \angle_r_reg[8]  ( .D(angle[8]), .CK(clk), .RN(n10), .Q(angle_r[8])
         );
  DFFR_X1 \angle_r_reg[7]  ( .D(angle[7]), .CK(clk), .RN(n10), .Q(angle_r[7])
         );
  DFFR_X1 \angle_r_reg[6]  ( .D(angle[6]), .CK(clk), .RN(n10), .Q(angle_r[6])
         );
  DFFR_X1 \angle_r_reg[5]  ( .D(angle[5]), .CK(clk), .RN(n10), .Q(angle_r[5])
         );
  DFFR_X1 \angle_r_reg[4]  ( .D(angle[4]), .CK(clk), .RN(n10), .Q(angle_r[4])
         );
  DFFR_X1 \angle_r_reg[3]  ( .D(angle[3]), .CK(clk), .RN(n10), .Q(angle_r[3])
         );
  DFFR_X1 \angle_r_reg[2]  ( .D(angle[2]), .CK(clk), .RN(n10), .Q(angle_r[2])
         );
  DFFR_X1 \angle_r_reg[1]  ( .D(angle[1]), .CK(clk), .RN(n10), .Q(angle_r[1])
         );
  DFFR_X1 \angle_r_reg[0]  ( .D(angle[0]), .CK(clk), .RN(n9), .Q(angle_r[0])
         );
  DFFR_X1 start_r_reg ( .D(start), .CK(clk), .RN(n9), .Q(start_r) );
  DLL_X1 cos_en_reg ( .D(N6), .GN(n7), .Q(cos_en) );
  DFFR_X1 \r_reg[0]  ( .D(r_c[0]), .CK(clk), .RN(n9), .Q(r[0]) );
  DFFR_X1 \i_reg[0]  ( .D(i_c[0]), .CK(clk), .RN(n9), .Q(i[0]) );
  DFFR_X1 \r_reg[1]  ( .D(r_c[1]), .CK(clk), .RN(n9), .Q(r[1]) );
  DFFR_X1 \i_reg[1]  ( .D(i_c[1]), .CK(clk), .RN(n9), .Q(i[1]) );
  DFFR_X1 \r_reg[2]  ( .D(r_c[2]), .CK(clk), .RN(n9), .Q(r[2]) );
  DFFR_X1 \i_reg[2]  ( .D(i_c[2]), .CK(clk), .RN(n9), .Q(i[2]) );
  DFFR_X1 \r_reg[3]  ( .D(r_c[3]), .CK(clk), .RN(n9), .Q(r[3]) );
  DFFR_X1 \i_reg[3]  ( .D(i_c[3]), .CK(clk), .RN(n9), .Q(i[3]) );
  DFFR_X1 \r_reg[4]  ( .D(r_c[4]), .CK(clk), .RN(n5), .Q(r[4]) );
  DFFR_X1 \i_reg[4]  ( .D(i_c[4]), .CK(clk), .RN(n5), .Q(i[4]) );
  DFFR_X1 \r_reg[5]  ( .D(r_c[5]), .CK(clk), .RN(n5), .Q(r[5]) );
  DFFR_X1 \i_reg[5]  ( .D(i_c[5]), .CK(clk), .RN(n5), .Q(i[5]) );
  DFFR_X1 \r_reg[6]  ( .D(r_c[6]), .CK(clk), .RN(n5), .Q(r[6]) );
  DFFR_X1 \i_reg[6]  ( .D(i_c[6]), .CK(clk), .RN(n5), .Q(i[6]) );
  DFFR_X1 \r_reg[7]  ( .D(r_c[7]), .CK(clk), .RN(n5), .Q(r[7]) );
  DFFR_X1 \i_reg[7]  ( .D(i_c[7]), .CK(clk), .RN(n5), .Q(i[7]) );
  DFFR_X1 \r_reg[8]  ( .D(r_c[8]), .CK(clk), .RN(n5), .Q(r[8]) );
  DFFR_X1 \i_reg[8]  ( .D(i_c[8]), .CK(clk), .RN(n5), .Q(i[8]) );
  DFFR_X1 \r_reg[9]  ( .D(r_c[9]), .CK(clk), .RN(n5), .Q(r[9]) );
  DFFR_X1 \i_reg[9]  ( .D(i_c[9]), .CK(clk), .RN(n5), .Q(i[9]) );
  DFFR_X1 \r_reg[10]  ( .D(r_c[10]), .CK(clk), .RN(n5), .Q(r[10]) );
  DFFR_X1 \i_reg[10]  ( .D(i_c[10]), .CK(clk), .RN(n5), .Q(i[10]) );
  DFFR_X1 \r_reg[11]  ( .D(r_c[11]), .CK(clk), .RN(n5), .Q(r[11]) );
  DFFR_X1 \i_reg[11]  ( .D(i_c[11]), .CK(clk), .RN(n5), .Q(i[11]) );
  DFFR_X1 \r_reg[12]  ( .D(r_c[12]), .CK(clk), .RN(n5), .Q(r[12]) );
  DFFR_X1 \i_reg[12]  ( .D(i_c[12]), .CK(clk), .RN(n5), .Q(i[12]) );
  DFFR_X1 \r_reg[13]  ( .D(r_c[13]), .CK(clk), .RN(n10), .Q(r[13]) );
  DFFR_X1 \i_reg[13]  ( .D(i_c[13]), .CK(clk), .RN(n5), .Q(i[13]) );
  DFFR_X1 \r_reg[14]  ( .D(r_c[14]), .CK(clk), .RN(n10), .Q(r[14]) );
  DFFR_X1 \i_reg[14]  ( .D(i_c[14]), .CK(clk), .RN(n9), .Q(i[14]) );
  DFFR_X1 \r_reg[15]  ( .D(r_c[15]), .CK(clk), .RN(n9), .Q(r[15]) );
  DFFR_X1 \i_reg[15]  ( .D(i_c[15]), .CK(clk), .RN(n9), .Q(i[15]) );
  DLH_X1 \r_c_reg[0]  ( .G(N14), .D(cos_val[0]), .Q(r_c[0]) );
  DLH_X1 \i_c_reg[0]  ( .G(n4), .D(cos_val[0]), .Q(i_c[0]) );
  DLH_X1 \r_c_reg[1]  ( .G(N14), .D(cos_val[1]), .Q(r_c[1]) );
  DLH_X1 \i_c_reg[1]  ( .G(n4), .D(cos_val[1]), .Q(i_c[1]) );
  DLH_X1 \r_c_reg[2]  ( .G(N14), .D(cos_val[2]), .Q(r_c[2]) );
  DLH_X1 \i_c_reg[2]  ( .G(n4), .D(cos_val[2]), .Q(i_c[2]) );
  DLH_X1 \r_c_reg[3]  ( .G(N14), .D(cos_val[3]), .Q(r_c[3]) );
  DLH_X1 \i_c_reg[3]  ( .G(n4), .D(cos_val[3]), .Q(i_c[3]) );
  DLH_X1 \r_c_reg[4]  ( .G(N14), .D(cos_val[4]), .Q(r_c[4]) );
  DLH_X1 \i_c_reg[4]  ( .G(n4), .D(cos_val[4]), .Q(i_c[4]) );
  DLH_X1 \r_c_reg[5]  ( .G(N14), .D(cos_val[5]), .Q(r_c[5]) );
  DLH_X1 \i_c_reg[5]  ( .G(n4), .D(cos_val[5]), .Q(i_c[5]) );
  DLH_X1 \r_c_reg[6]  ( .G(N14), .D(cos_val[6]), .Q(r_c[6]) );
  DLH_X1 \i_c_reg[6]  ( .G(n4), .D(cos_val[6]), .Q(i_c[6]) );
  DLH_X1 \r_c_reg[7]  ( .G(N14), .D(cos_val[7]), .Q(r_c[7]) );
  DLH_X1 \i_c_reg[7]  ( .G(n4), .D(cos_val[7]), .Q(i_c[7]) );
  DLH_X1 \r_c_reg[8]  ( .G(N14), .D(cos_val[8]), .Q(r_c[8]) );
  DLH_X1 \i_c_reg[8]  ( .G(n4), .D(cos_val[8]), .Q(i_c[8]) );
  DLH_X1 \r_c_reg[9]  ( .G(N14), .D(cos_val[9]), .Q(r_c[9]) );
  DLH_X1 \i_c_reg[9]  ( .G(n4), .D(cos_val[9]), .Q(i_c[9]) );
  DLH_X1 \r_c_reg[10]  ( .G(N14), .D(cos_val[10]), .Q(r_c[10]) );
  DLH_X1 \i_c_reg[10]  ( .G(n4), .D(cos_val[10]), .Q(i_c[10]) );
  DLH_X1 \r_c_reg[11]  ( .G(N14), .D(cos_val[11]), .Q(r_c[11]) );
  DLH_X1 \i_c_reg[11]  ( .G(n4), .D(cos_val[11]), .Q(i_c[11]) );
  DLH_X1 \r_c_reg[12]  ( .G(N14), .D(cos_val[12]), .Q(r_c[12]) );
  DLH_X1 \i_c_reg[12]  ( .G(n4), .D(cos_val[12]), .Q(i_c[12]) );
  DLH_X1 \r_c_reg[13]  ( .G(N14), .D(cos_val[13]), .Q(r_c[13]) );
  DLH_X1 \i_c_reg[13]  ( .G(n4), .D(cos_val[13]), .Q(i_c[13]) );
  DLH_X1 \r_c_reg[14]  ( .G(N14), .D(cos_val[14]), .Q(r_c[14]) );
  DLH_X1 \i_c_reg[14]  ( .G(n4), .D(cos_val[14]), .Q(i_c[14]) );
  DLH_X1 \r_c_reg[15]  ( .G(N14), .D(cos_val[15]), .Q(r_c[15]) );
  DLH_X1 \i_c_reg[15]  ( .G(n4), .D(cos_val[15]), .Q(i_c[15]) );
  INV_X1 U3 ( .A(reset), .ZN(n5) );
  OAI21_X1 U4 ( .B1(start_r), .B2(n1), .A(n6), .ZN(n7) );
  AND2_X1 U5 ( .A1(N6), .A2(start_r), .ZN(n8) );
  NOR2_X1 U7 ( .A1(n1), .A2(n2), .ZN(N6) );
  DFFR_X1 \mode_reg[0]  ( .D(n8), .CK(clk), .RN(n5), .Q(n1) );
  DFFR_X1 \mode_reg[1]  ( .D(N14), .CK(clk), .RN(n5), .Q(n2), .QN(n6) );
  AND2_X1 U11 ( .A1(n6), .A2(n1), .ZN(N14) );
  NOR2_X2 U12 ( .A1(n1), .A2(n6), .ZN(n4) );
  CLKBUF_X1 U13 ( .A(n5), .Z(n9) );
  CLKBUF_X1 U14 ( .A(n5), .Z(n10) );
endmodule

