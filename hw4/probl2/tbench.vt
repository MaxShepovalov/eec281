//tbench for fft
`timescale 1ns/10ps
module tbench();
    
    integer file;
    reg [11:0] angle;
    reg [15:0] A_real;
    reg [15:0] A_imag;
    reg [15:0] B_real;
    reg [15:0] B_imag;
    wire [15:0] X_real;
    wire [15:0] X_imag;
    wire [15:0] Y_real;
    wire [15:0] Y_imag;
    reg clk, rst;
    integer count = 0;
    reg [31:0] extreme_A [19:0];
    reg [31:0] extreme_B [19:0];
    reg [11:0] extreme_exp [19:0];

    reg signed [11:0] print_exp;
    reg signed [15:0] print0, print1;
    reg [31:0] A_buffer [3:0];
    reg [31:0] B_buffer [3:0];
    reg [11:0] exp_buffer [3:0];

    fftbtf F1 (
        .clk (clk),
        .rst (rst),
        .wn_exp (angle),
        .A_R (A_real),
        .A_I (A_imag),
        .B_R (B_real),
        .B_I (B_imag),
        .X_R (X_real),
        .X_I (X_imag),
        .Y_R (Y_real),
        .Y_I (Y_imag)
    );

    initial begin
        $recordfile("fft_test");
        $recordvars(tbench);
        file = $fopen("complex_result.m", "w");
        clk = 1'b0;
        //set extreme cases

        //init buffer
        A_buffer[0] = 31'd0;
        A_buffer[1] = 31'd0;
        A_buffer[2] = 31'd0;
        A_buffer[3] = 31'd0;

        B_buffer[0] = 31'd0;
        B_buffer[1] = 31'd0;
        B_buffer[2] = 31'd0;
        B_buffer[3] = 31'd0;

        exp_buffer[0] = 11'd0;
        exp_buffer[1] = 11'd0;
        exp_buffer[2] = 11'd0;
        exp_buffer[3] = 11'd0;

        rst = 1'b1;
        #35
        rst = 1'b0;
        count = 0;
        angle = extreme_exp[0];
        {A_real, A_imag} = extreme_A[0];
        {B_real, B_imag} = extreme_B[1];
    end

    always begin
        #10;
        clk = ~clk;
    end

    always @(posedge clk) begin
        $display("done %d\%",count/10);
        A_buffer[3] <= A_buffer[2];
        A_buffer[2] <= A_buffer[1];
        A_buffer[1] <= A_buffer[0];
        A_buffer[0] <= {A_real, A_imag};
        
        B_buffer[3] <= B_buffer[2];
        B_buffer[2] <= B_buffer[1];
        B_buffer[1] <= B_buffer[0];
        B_buffer[0] <= {B_real, B_imag};
        
        exp_buffer[3] <= exp_buffer[2];
        exp_buffer[2] <= exp_buffer[1];
        exp_buffer[1] <= exp_buffer[0];
        exp_buffer[0] <= angle;

        if (rst == 0) begin
            if (count < 20) begin
                //send next values
                count = count + 1;
                {A_real, A_imag} = extreme_A[count];
                {B_real, B_imag} = extreme_B[count];
                angle = extreme_exp[count];
            end else begin
                count = count + 1;
                {A_real, A_imag} = $random;
                {B_real, B_imag} = $random;
                angle = $random % 4096;
            end
            //report
            if (count >= 3) begin
                print_exp = exp_buffer[3];
                $fwrite(file, "wn_exp(%d+1) = %d; ", count-3, print_exp);
                {print0, print1} = A_buffer[3];
                $fwrite(file, "a(%d+1) = %d + 1i * %d; ", count-3, print0, print1);
                {print0, print1} = B_buffer[3];
                $fwrite(file, "b(%d+1) = %d + 1i * %d; ", count-3, print0, print1);
                print0 = X_real;
                print1 = X_imag;
                $fwrite(file, "x(%d+1) = %d + 1i * %d; ", count-3, print0, print1);
                print0 = Y_real;
                print1 = Y_imag;
                $fwrite(file, "x(%d+1) = %d + 1i * %d;\n", count-3, print0, print1);
            end
            if (count > 1000) begin
                $finish;
            end
        end
    end

endmodule