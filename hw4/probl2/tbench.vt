//tbench for fft
`timescale 1ns/10ps
module tbench();
    
    integer file;
    reg [11:0] angle;
    reg [15:0] A_real;
    reg [15:0] A_imag;
    reg [15:0] B_real;
    reg [15:0] B_imag;
    wire [15:0] X_real;
    wire [15:0] X_imag;
    wire [15:0] Y_real;
    wire [15:0] Y_imag;
    reg clk, rst;
    integer count = 0;
    reg [31:0] extreme_A [19:0];
    reg [31:0] extreme_B [19:0];
    reg [11:0] extreme_exp [19:0];
    integer timer = 0;

    reg signed [15:0] print0, print1;
    reg [31:0] A_buffer [3:0];
    reg [31:0] B_buffer [3:0];
    reg [11:0] exp_buffer [3:0];

    fftbtf F1 (
        .clk (clk),
        .rst (rst),
        .wn_exp (angle),
        .A_R (A_real),
        .A_I (A_imag),
        .B_R (B_real),
        .B_I (B_imag),
        .X_R (X_real),
        .X_I (X_imag),
        .Y_R (Y_real),
        .Y_I (Y_imag)
    );

    initial begin
        $recordfile("fft_test");
        $recordvars(tbench);
        file = $fopen("complex_result.m", "w");
        clk = 1'b0;
        angle = 12'd0;
        A_real = 16'd0;
        A_imag = 16'd0;
        B_real = 16'd0;
        B_imag = 16'd0;
        //set extreme cases
        extreme_exp[0] = 12'b0000_0000_0000;
        extreme_A[0] = 32'h00000000;
        extreme_B[0] = 32'h00000000;
        extreme_exp[1] = 12'b0100_0000_0000;
        extreme_A[1] = 32'h00000000;
        extreme_B[1] = 32'h00000000;
        extreme_exp[2] = 12'b0100_0000_0000;
        extreme_A[2] = 32'h00000001;
        extreme_B[2] = 32'h00000001;
        extreme_exp[3] = 12'b0100_0000_0000;
        extreme_A[3] = 32'hFFFFFFFF; 
        extreme_B[3] = 32'hFFFFFFFF;
        extreme_exp[4] = 12'b0100_0000_0000;
        extreme_A[4] = 32'h0000FFFF;
        extreme_B[4] = 32'hFFFF0000;
        extreme_exp[5] = 12'b0000_0000_0000;
        extreme_A[5] = 32'hFFFF0000;
        extreme_B[5] = 32'h0000FFFF;
        extreme_exp[6] = 12'b1111_1111_1111;
        extreme_A[6] = 32'hFFFFFFFF;
        extreme_B[6] = 32'h00000000;
        extreme_exp[7] = 12'b1000_0000_0000;
        extreme_A[7] = 32'h00000000;
        extreme_B[7] = 32'hFFFFFFFF;
        extreme_exp[8] = 12'b0010_0000_0000;
        extreme_A[8] = 32'h00010000;
        extreme_B[8] = 32'h00010000;
        extreme_exp[9] = 12'b1110_0000_0000;
        extreme_A[9] = 32'h00010002;
        extreme_B[9] = 32'h00010002;
        extreme_exp[10] = 12'b1010_0000_0000;
        extreme_A[10] = 32'hFFFF0000;
        extreme_B[10] = 32'hFFFF0000;
        extreme_exp[11] = 12'b1010_0000_0000;
        extreme_A[11] = 32'h00007FFF;
        extreme_B[11] = 32'h00007FFF;
        extreme_exp[12] = 12'b0100_0000_0000;
        extreme_A[12] = 32'h7FFF7FFF;
        extreme_B[12] = 32'h7FFF7FFF;
        extreme_exp[13] = 12'b1010_0000_0000;
        extreme_A[13] = 32'h7FFF7FFF; 
        extreme_B[13] = 32'h7FFF7FFF;
        extreme_exp[14] = 12'b0100_0000_0000;
        extreme_A[14] = 32'h80008000;
        extreme_B[14] = 32'h80008000;
        extreme_exp[15] = 12'b0000_0000_0000;
        extreme_A[15] = 32'h7FFF8000;
        extreme_B[15] = 32'h80007FFF;
        extreme_exp[16] = 12'b1000_0000_0000;
        extreme_A[16] = 32'h7FFF8000;
        extreme_B[16] = 32'h80007FFF;
        extreme_exp[17] = 12'b1000_0000_0000;
        extreme_A[17] = 32'h80007FFF;
        extreme_B[17] = 32'h7FFF8000;
        extreme_exp[18] = 12'b0000_0000_0000;
        extreme_A[18] = 32'h80007FFF;
        extreme_B[18] = 32'h7FFF8000;
        extreme_exp[19] = 12'b1110_0000_0000;
        extreme_A[19] = 32'h7FFF7FFF;
        extreme_B[19] = 32'h80008000;

        //init buffer
        A_buffer[0] = 31'd0;
        A_buffer[1] = 31'd0;
        A_buffer[2] = 31'd0;
        A_buffer[3] = 31'd0;

        B_buffer[0] = 31'd0;
        B_buffer[1] = 31'd0;
        B_buffer[2] = 31'd0;
        B_buffer[3] = 31'd0;

        exp_buffer[0] = 12'd0;
        exp_buffer[1] = 12'd0;
        exp_buffer[2] = 12'd0;
        exp_buffer[3] = 12'd0;

        rst = 1'b1;
        #35
        rst = 1'b0;
        count = 0;
        angle = extreme_exp[0];
        {A_real, A_imag} = extreme_A[0];
        {B_real, B_imag} = extreme_B[1];
        timer = 3;
    end

    always begin
        #10;
        clk = ~clk;
    end

    always @(posedge clk) begin
        //$display("done %d\%",count/10);
        A_buffer[3] <= A_buffer[2];
        A_buffer[2] <= A_buffer[1];
        A_buffer[1] <= A_buffer[0];
        A_buffer[0] <= {A_real, A_imag};
        
        B_buffer[3] <= B_buffer[2];
        B_buffer[2] <= B_buffer[1];
        B_buffer[1] <= B_buffer[0];
        B_buffer[0] <= {B_real, B_imag};
        
        exp_buffer[3] <= exp_buffer[2];
        exp_buffer[2] <= exp_buffer[1];
        exp_buffer[1] <= exp_buffer[0];
        exp_buffer[0] <= angle;

        if (rst == 0) begin
            if (timer > 0) begin
                timer = timer - 1;
            end else begin
                count = count + 1;
                if (count < 20) begin
                    //send next values
                    {A_real, A_imag} = extreme_A[count];
                    {B_real, B_imag} = extreme_B[count];
                    angle = extreme_exp[count];
                end else begin
                    {A_real, A_imag} = $random;
                    {B_real, B_imag} = $random;
                    angle = $random % 4096;
                end
                //report
                if (count >= 5) begin
                    $fwrite(file, "wn_exp(%d+1) = %d; ", count-3, exp_buffer[3]);
                    {print0, print1} = A_buffer[3];
                    $fwrite(file, "a(%d+1) = %d + 1i * %d; ", count-3, print0, print1);
                    {print0, print1} = B_buffer[3];
                    $fwrite(file, "b(%d+1) = %d + 1i * %d; ", count-3, print0, print1);
                    print0 = X_real;
                    print1 = X_imag;
                    $fwrite(file, "x(%d+1) = %d + 1i * %d; ", count-3, print0, print1);
                    print0 = Y_real;
                    print1 = Y_imag;
                    $fwrite(file, "y(%d+1) = %d + 1i * %d;\n", count-3, print0, print1);
                    timer = 3;
                end
                if (count > 1000) begin
                    $finish;
                end
            end
        end
    end

endmodule