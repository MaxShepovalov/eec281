// Test bench for verifying the fulladder implementation

`timescale 1ns/10ps

// Test bench module has no inputs or outputs
module tbench;

//----- Declarations
// declare variables to hold signals going into submodule
reg     a,b,c,d,ci;

// Misc "wires"
wire    sum, cout, co, c1, sum2;

integer i;
reg [1:0] sum_test;
reg [2:0] sum42_test;

//----- abc submodule
fulladder fa1 (
  .a    (a),
  .b    (b),
  .cin  (c),
  .cout (cout),
  .s    (sum)
  );

adder42 comp(
  .a  (a),
  .b  (b),
  .c  (c),
  .d  (d),
  .ci (ci),
  .co (co),
  .c1 (c1),
  .s  (sum2)
);

initial begin
  $recordfile("tbench");
  $recordvars(tbench);

  $display("\nFull Adder");
  $display("inp output correct");
  $display("===   ==   =");

  a = 1'b0;
  b = 1'b0;
  c = 1'b0;
  #100;
  
  for (i=0; i<8; i=i+1) begin
     {a, b, c} = i;
     sum_test = a+b+c;
     #10
     if ({cout,sum} == sum_test)
        $display("%b   %b   Y",{a,b,c},{cout,sum});
     else
        $display("%b   %b   no, expected %b",{a,b,c},{cout,sum},sum_test);
  end

  $display("\n4:2 Adder");
  $display("input co,c1,sum correct");
  $display("===== = = =     =");

  for (i=0; i<32; i=i+1) begin
    {a,b,c,d,ci} = i;
    sum42_test = a+b+c+d+ci;
    #10
    if (2*co+2*c1+sum2 == sum42_test)
      $display("%b %b %b %b     Y",{a,b,c,d,ci},co,c1,sum2);
    else
      $display("%b %b %b %b     no, this sum is %d, expected %d",{a,b,c,d,ci},co,c1,sum2,2*co+2*c1+sum2,sum42_test);
  end

  $finish;             // ends simulation
end
    
endmodule

